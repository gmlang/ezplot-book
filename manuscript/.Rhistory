engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
load(path_lst[[2]])
df
12/30
df
########## set up ####################
rm(list=ls())
# load libraries
library(tidyr)
library(dplyr)
library(ezplot)
# get color-blind friendly colors
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
cb_gray = cb_color("cb_gray")
# set paths
proj_path = "~/Projects/ds/sven"
helper_path = file.path(proj_path, "code/helper")
data_path = file.path(proj_path, "data")
raw_path =  file.path(data_path, "raw")
cleaned_path = file.path(data_path, "cleaned")
resi_path = file.path(cleaned_path, "resilience_scores")
path_lst = list(confused_path = file.path(resi_path, "confused.rda"),
depression_path = file.path(resi_path, "depression.rda"),
disengaged_path = file.path(resi_path, "disengaged.rda"),
distress_path = file.path(resi_path, "distress.rda"),
energise_body_path = file.path(resi_path, "energise_body.rda"),
engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
# source helper functions
source(file.path(helper_path, "utils.R"))
template_path = file.path(helper_path, "plot-template.Rmd")
# load data
# load(file.path(raw_path, "questions.rda"))
load(file.path(cleaned_path, "dat.rda"))
# subset dat
subdat = dat %>% select(uid, gender, jobfunction, age, country)
subdat = subdat[!duplicated(subdat),]
subdat$age_cat[subdat$age < 25] = "below 25"
subdat$age_cat[subdat$age >= 25 & subdat$age < 30] = "25 - 29"
subdat$age_cat[subdat$age >= 30 & subdat$age < 40] = "30 - 39"
subdat$age_cat[subdat$age >= 40 & subdat$age < 50] = "40 - 49"
subdat$age_cat[subdat$age >= 50 & subdat$age < 60] = "50 - 59"
subdat$age_cat[subdat$age >= 60] = "60 +"
subdat$age_cat = factor(subdat$age_cat,
levels = c("below 25", "25 - 29", "30 - 39",
"40 - 49", "50 - 59", "60 +"))
# get unique categories
cats = sapply(gsub("_", " ", gsub("_path", "", names(path_lst))), simple_cap)
load(path_lst[[1]])
subdf = df %>% select(uid, resilience_pct)
df = left_join(subdf, subdat)
df
str(df)
table(df$jobfunction)
sort(table(df$jobfunction))
sort(-table(df$jobfunction))
?sort
sort(table(df$jobfunction), decreasing = T)
names(sort(table(df$jobfunction), decreasing = T))
lvls = names(sort(table(df$jobfunction), decreasing = T))
df = df %>% mutate(jobfunction = factor(jobfunction, levels = lvls))
plt = mk_boxplot(df)
p = plt("jobfunction", "resilience_pct", ylab="resilience score", vpos=0.06,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale="pct")
print(p)
lvls = names(sort(table(df$jobfunction)))
df = df %>% mutate(jobfunction = factor(jobfunction, levels = lvls))
# create functions for making boxplot
plt = mk_boxplot(df)
p = plt("jobfunction", "resilience_pct", ylab="resilience score", vpos=0.06,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale="pct")
print(p)
lvls = names(sort(table(df$country)))
df = df %>% mutate(country = factor(country, levels = lvls))
# create functions for making boxplot
plt = mk_boxplot(df)
p = plt("country", "resilience_pct", ylab="resilience score", vpos=0.06,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale = "pct")
print(p)
lvls
length(lvls)
length(lvls)
lvls[length(lvls)-10:length(lvls)]
lvls[(length(lvls)-10):length(lvls)]
lvls[(length(lvls)-11):length(lvls)]
lvls[(length(lvls)-9):length(lvls)]
df[as.character(df$country) %in% keep,]
keep = lvls[(length(lvls)-9):length(lvls)]
df[as.character(df$country) %in% keep,]
keep = lvls[(length(lvls)-9):length(lvls)]
df2 = df %>% filter(as.character(country) %in% keep) %>%
select(resilience_pct, country)
plt2 = mk_boxplot(df2)
cb_gray
warnings()
########## set up ####################
rm(list=ls())
# load libraries
library(tidyr)
library(dplyr)
library(ezplot)
# get color-blind friendly colors
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
cb_gray = cb_color("cb_gray")
# set paths
proj_path = "~/Projects/ds/sven"
helper_path = file.path(proj_path, "code/helper")
data_path = file.path(proj_path, "data")
raw_path =  file.path(data_path, "raw")
cleaned_path = file.path(data_path, "cleaned")
resi_path = file.path(cleaned_path, "resilience_scores")
path_lst = list(confused_path = file.path(resi_path, "confused.rda"),
depression_path = file.path(resi_path, "depression.rda"),
disengaged_path = file.path(resi_path, "disengaged.rda"),
distress_path = file.path(resi_path, "distress.rda"),
energise_body_path = file.path(resi_path, "energise_body.rda"),
engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
# source helper functions
source(file.path(helper_path, "utils.R"))
template_path = file.path(helper_path, "plot-template.Rmd")
# load data
# load(file.path(raw_path, "questions.rda"))
load(file.path(cleaned_path, "dat.rda"))
# subset dat
subdat = dat %>% select(uid, gender, jobfunction, age, country)
subdat = subdat[!duplicated(subdat),]
subdat$age_cat[subdat$age < 25] = "below 25"
subdat$age_cat[subdat$age >= 25 & subdat$age < 30] = "25 - 29"
subdat$age_cat[subdat$age >= 30 & subdat$age < 40] = "30 - 39"
subdat$age_cat[subdat$age >= 40 & subdat$age < 50] = "40 - 49"
subdat$age_cat[subdat$age >= 50 & subdat$age < 60] = "50 - 59"
subdat$age_cat[subdat$age >= 60] = "60 +"
subdat$age_cat = factor(subdat$age_cat,
levels = c("below 25", "25 - 29", "30 - 39",
"40 - 49", "50 - 59", "60 +"))
# get unique categories
cats = sapply(gsub("_", " ", gsub("_path", "", names(path_lst))), simple_cap)
cats
rm(list=ls())
# load libraries
library(tidyr)
library(dplyr)
library(ezplot)
# get color-blind friendly colors
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
cb_gray = cb_color("cb_gray")
# set paths
proj_path = "~/Projects/ds/sven"
helper_path = file.path(proj_path, "code/helper")
data_path = file.path(proj_path, "data")
raw_path =  file.path(data_path, "raw")
cleaned_path = file.path(data_path, "cleaned")
resi_path = file.path(cleaned_path, "resilience_scores")
path_lst = list(confused_path = file.path(resi_path, "confused.rda"),
depression_path = file.path(resi_path, "depression.rda"),
disengaged_path = file.path(resi_path, "disengaged.rda"),
distress_path = file.path(resi_path, "distress.rda"),
energise_body_path = file.path(resi_path, "energise_body.rda"),
engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
# source helper functions
source(file.path(helper_path, "utils.R"))
template_path = file.path(helper_path, "plot-template.Rmd")
# load data
# load(file.path(raw_path, "questions.rda"))
load(file.path(cleaned_path, "dat.rda"))
# subset dat
subdat = dat %>% select(uid, gender, jobfunction, age, country)
subdat = subdat[!duplicated(subdat),]
subdat$age_cat[subdat$age < 25] = "below 25"
subdat$age_cat[subdat$age >= 25 & subdat$age < 30] = "25 - 29"
subdat$age_cat[subdat$age >= 30 & subdat$age < 40] = "30 - 39"
subdat$age_cat[subdat$age >= 40 & subdat$age < 50] = "40 - 49"
subdat$age_cat[subdat$age >= 50 & subdat$age < 60] = "50 - 59"
subdat$age_cat[subdat$age >= 60] = "60 +"
subdat$age_cat = factor(subdat$age_cat,
levels = c("below 25", "25 - 29", "30 - 39",
"40 - 49", "50 - 59", "60 +"))
# get unique categories
cats = sapply(gsub("_", " ", gsub("_path", "", names(path_lst))), simple_cap)
load(path_lst[[5]])
cat=cats[5]
cat
paste(cat)
paste(cat, collapse = "")
paste(cat, collapse = " ")
paste0(cat, collapse = " ")
paste(cat, collapse = " ")
gsub(" ", "", cat)
subdf = df %>% select(uid, resilience_pct)
df = left_join(subdf, subdat)
lvls = names(sort(table(df$jobfunction)))
df = df %>% mutate(jobfunction = factor(jobfunction, levels = lvls))
lvls = names(sort(table(df$country)))
df = df %>% mutate(country = factor(country, levels = lvls))
keep = lvls[(length(lvls)-9):length(lvls)]
df2 = df %>% filter(as.character(country) %in% keep) %>%
select(resilience_pct, country)
plt2 = mk_boxplot(df2)
df2
p = plt2("country", "resilience_pct", ylab="resilience score", vpos=0.02,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale = "pct")
print(p)
gsub(" ", "", cat)
rm(list=ls())
# load libraries
library(tidyr)
library(dplyr)
library(ezplot)
# get color-blind friendly colors
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
cb_gray = cb_color("cb_gray")
# set paths
proj_path = "~/Projects/ds/sven"
helper_path = file.path(proj_path, "code/helper")
data_path = file.path(proj_path, "data")
raw_path =  file.path(data_path, "raw")
cleaned_path = file.path(data_path, "cleaned")
resi_path = file.path(cleaned_path, "resilience_scores")
path_lst = list(confused_path = file.path(resi_path, "confused.rda"),
depression_path = file.path(resi_path, "depression.rda"),
disengaged_path = file.path(resi_path, "disengaged.rda"),
distress_path = file.path(resi_path, "distress.rda"),
energise_body_path = file.path(resi_path, "energise_body.rda"),
engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
# source helper functions
source(file.path(helper_path, "utils.R"))
template_path = file.path(helper_path, "plot-template.Rmd")
# load data
# load(file.path(raw_path, "questions.rda"))
load(file.path(cleaned_path, "dat.rda"))
# subset dat
subdat = dat %>% select(uid, gender, jobfunction, age, country)
subdat = subdat[!duplicated(subdat),]
subdat$age_cat[subdat$age < 25] = "below 25"
subdat$age_cat[subdat$age >= 25 & subdat$age < 30] = "25 - 29"
subdat$age_cat[subdat$age >= 30 & subdat$age < 40] = "30 - 39"
subdat$age_cat[subdat$age >= 40 & subdat$age < 50] = "40 - 49"
subdat$age_cat[subdat$age >= 50 & subdat$age < 60] = "50 - 59"
subdat$age_cat[subdat$age >= 60] = "60 +"
subdat$age_cat = factor(subdat$age_cat,
levels = c("below 25", "25 - 29", "30 - 39",
"40 - 49", "50 - 59", "60 +"))
# get unique categories
cats = sapply(gsub("_", " ", gsub("_path", "", names(path_lst))), simple_cap)
load(path_lst[[5]])
subdf = df %>% select(uid, resilience_pct)
df = left_join(subdf, subdat)
# change jobfunction to factor with levels in increasing order of its cnt
lvls = names(sort(table(df$jobfunction)))
df = df %>% mutate(jobfunction = factor(jobfunction, levels = lvls))
# change country to factor with levels in increasing order of its cnt
lvls = names(sort(table(df$country)))
df = df %>% mutate(country = factor(country, levels = lvls))
# create functions for making boxplot
plt = mk_boxplot(df)
# extract top 10 countries
keep = lvls[(length(lvls)-9):length(lvls)]
df2 = df %>% filter(as.character(country) %in% keep) %>%
select(resilience_pct, country)
plt2 = mk_boxplot(df2)
p = plt("gender", "resilience_pct", ylab="resilience score", vpos=0.02,
legend = FALSE)
p = scale_axis(p, scale = "pct")
p = p + ggplot2::scale_fill_manual(values = c(purple, green))
print(p)
p = plt("gender", "resilience_pct", ylab="resilience score", vpos=0.02,
legend = FALSE)
p = scale_axis(p, scale = "pct")
pri
print(p)
unique(df$gender)
p = plt("gender", "resilience_pct", ylab="resilience score", vpos=0.02,
legend = FALSE)
p
p = scale_axis(p, scale = "pct")
p
p = plt("gender", "resilience_pct", ylab="resilience score", vpos=0.02,
legend = FALSE)
p
p = p + ggplot2::scale_fill_manual(values = c(purple, green))
print(p)
p = plt("gender", "resilience_pct", ylab="resilience score",
legend = FALSE)
p = scale_axis(p, scale = "pct")
print(p)
p = p + ggplot2::scale_fill_manual(values = c(purple, green))
print(p)
p = plt("gender", "resilience_pct", ylab="resilience score", legend = FALSE, vpos=-0.8)
p = scale_axis(p, scale = "pct")
p = p + ggplot2::scale_fill_manual(values = c(purple, green))
print(p)
p = plt("country", "resilience_pct", ylab="resilience score", vpos=-0.8,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale = "pct")
print(p)
p = plt2("country", "resilience_pct", ylab="resilience score", vpos=-0.8,
legend = FALSE)
p = p + ggplot2::coord_flip()
p = scale_axis(p, scale = "pct")
print(p)
?mk_boxplot()
mk_boxplot()
library(devtools)
home_path = Sys.getenv("HOME")
proj_path = file.path(home_path, "Rpkg")
setwd(file.path(proj_path, "ezplot"))
document()
# install package
install.packages("/Users/gmlang/Rpkg/ezplot", repos=NULL, type="source")
library(ezplot)
library(ezplot)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
library(devtools)
home_path = Sys.getenv("HOME")
proj_path = file.path(home_path, "Rpkg")
setwd(file.path(proj_path, "ezplot"))
document()
install.packages("/Users/gmlang/Rpkg/ezplot", repos=NULL, type="source")
library(ezplot)
library(ezplot)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
document()
install.packages("/Users/gmlang/Rpkg/ezplot", repos=NULL, type="source")
library(ezplot)
library(ezplot)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title)
scale_axis(p, scale = "log10")
document()
install.packages("/Users/gmlang/Rpkg/ezplot", repos=NULL, type="source")
library(ezplot)
library(ezplot)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title, add_label = F)
scale_axis(p, scale = "log10")
p = plt(xvar="", yvar="budget", ylab="budget ($)", main=title)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="", yvar="budget", ylab="budget ($)", main=title)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
p = plt("budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
library(ezplot)
plt = mk_boxplot(films)
title = "Distribution of Budget"
p = plt(xvar="1", yvar="budget", ylab="budget ($)", main=title)
scale_axis(p, axis="y", scale="log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title, add_label = F)
scale_axis(p, scale = "log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title, add_label = F)
scale_axis(p, scale = "log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title, add_label = F)
scale_axis(p, scale = "log10")
title = "Distribution of Budget from 1913 to 2014"
p = plt("year", "budget", ylab="budget ($)", main=title, add_label = F)
scale_axis(p, scale = "log10")
p = plt("year_cat", "budget", ylab="budget ($)", main=title)
scale_axis(p, "y", scale = "comma")
p = scale_axis(p, scale = "log10")
print(p)
p = plt("year_cat", "budget", ylab="budget ($)", main=title)
# apply comma scale to the y-axis to display the numbers in 000,000 format
scale_axis(p, "y", scale = "comma")
p = plt("year_cat", "budget", ylab="budget ($)", main=title, vpos=10)
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, vpos=1000)
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, vpos=10000)
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, vpos=100000)
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title)
# apply comma scale to the y-axis to display the numbers in 000,000 format
scale_axis(p, "y", scale = "comma")
p = scale_axis(p, scale = "log10")
print(p)
red = cb_color("vermilion")
green = cb_color("bluish_green")
purple = cb_color("reddish_purple")
blue = cb_color("blue")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
print(p)
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F)
p
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F,
vpos = -10^3)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F,
vpos = -10^2)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F,
vpos = -1)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F,
vpos = -0.5)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
p
p
p = plt("year_cat", "budget", ylab="budget ($)", main=title, lab_at_top = F,
vpos = -0.5, legend=F)
p = scale_axis(p, scale = "log10")
p = p + ggplot2::scale_fill_manual(values = c(red, green, purple, blue))
print(p)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, tidy = FALSE,
echo = TRUE, fig.path='images/', fig.width = 7, fig.height = 7,
dev = 'png') # don't use fig.align, it forces html code for img
options(width = 100, scipen = 5, digits = 5)
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "03-03-boxplot.Rmd")
knitr::knit(file_in)
rm(list=ls())
# load libraries
library(tidyr)
library(dplyr)
library(ezplot)
# set paths
proj_path = "~/Projects/ds/sven"
helper_path = file.path(proj_path, "code/helper")
data_path = file.path(proj_path, "data")
raw_path =  file.path(data_path, "raw")
cleaned_path = file.path(data_path, "cleaned")
resi_path = file.path(cleaned_path, "resilience_scores")
path_lst = list(confused_path = file.path(resi_path, "confused.rda"),
depression_path = file.path(resi_path, "depression.rda"),
disengaged_path = file.path(resi_path, "disengaged.rda"),
distress_path = file.path(resi_path, "distress.rda"),
energise_body_path = file.path(resi_path, "energise_body.rda"),
engage_emotion_path = file.path(resi_path, "engage_emotion.rda"),
master_stress_path = file.path(resi_path, "master_stress.rda"),
spirit_in_action_path = file.path(resi_path, "spirit_in_action.rda"),
train_mind_path = file.path(resi_path, "train_mind.rda"),
vulnerable_path = file.path(resi_path, "vulnerable.rda"),
withdrawn_path = file.path(resi_path, "withdrawn.rda"))
load(path_lst[[1]])
df
category = c("confused", "depression", "disengaged", "distress", "energise_body",
"engage_emotion", "master_stress", "spirit_in_action", "train_mind",
"vulnerable", "withdrawn")
category
