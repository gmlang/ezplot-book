dat_prop = data.frame(sample_name, cell_prop)
print(dat_prop)
## BEGIN Main ##
# initialize vectors to hold output
sample_name = cell_prop = c()
# get the input folders
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) {
# load a gating set
gs = load_gs(file.path(auto_gs_path, dir))
# extract the gating hiearchy for the sample user specified
for (i in 1:length(gs)) {
gh = gs[[i]]
if (grepl(sample, gh@name)) {
sample_name = c(sample_name, gh@name)
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
}
}
}
dat_prop = data.frame(sample_name, cell_prop)
print(dat_prop)
## END Main ##
stats_path = file.path(HVTN080_path, "stats")
dir.create(stats_path, showWarnings = F)
save(cell_prop, file=file.path(stats_path, "cell_prop.rda"))
## BEGIN Main ##
# initialize vectors to hold output
sample_name = cell_prop = c()
# get the input folders
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) {
# load a gating set
gs = load_gs(file.path(auto_gs_path, dir))
# extract the gating hiearchy for the sample user specified
for (i in 1:length(gs)) {
gh = gs[[i]]
if (grepl(sample, gh@name)) {
sample_name = c(sample_name, gh@name)
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
}
}
}
# collect output in a data frame
cell_prop = data.frame(sample_name, cell_prop)
print(cell_prop)
# save
save(cell_prop, file=file.path(stats_path, "cell_prop.rda"))
## END Main ##
################################################################################
#
# Description: extracts the proportion of cells for user specified molecules,
#       gates and samples.
#
# Location: https://gitlab.com/tobiasg82/opencyto_pipeline.git
#
# Program name: 06-extract-cell-prop.R
#
# Input: autogated GatingSet objects
#
# Output: a data frame of 2
#
# Source code: any of the 05-name.R script
#
# Author: Guangming Lang (gmlang@cabaceo.com)
#
# Platform: x86_64-apple-darwin13.4.0 (64-bit)
#
# Sys.info: OS X 10.10.5 (Yosemite)
#
# R version: 3.2.3 (2015-12-10)
#
################################################################################
## BEGIN User Input ##
molecule = "IL2" # "IFNg"
gate = "cd4" # "8"
sample = "504885.fcs" # "504879.fcs",
# chain gate and molecule
gate_mole_chained = paste(gate, molecule, sep = "/") # don't change
## END User Input ##
## BEGIN Main ##
# initialize vectors to hold output
sample_name = cell_prop = c()
# get the input folders
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) {
# load a gating set
gs = load_gs(file.path(auto_gs_path, dir))
# extract the gating hiearchy for the sample user specified
for (i in 1:length(gs)) {
gh = gs[[i]]
if (grepl(sample, gh@name)) {
sample_name = c(sample_name, gh@name)
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
}
}
}
# collect output in a data frame
cell_prop = data.frame(sample_name, molecule=rep(molecule, length(cell_prop)),
gate=rep(gate, length(cell_prop)), cell_prop)
print(cell_prop)
# save
save(cell_prop, file=file.path(stats_path, "cell_prop.rda"))
################################################################################
#
# Description: extracts the proportion of cells for user specified molecules,
#       gates and samples.
#
# Location: https://gitlab.com/tobiasg82/opencyto_pipeline.git
#
# Program name: 06-extract-cell-prop.R
#
# Input: autogated GatingSet objects
#
# Output: a data frame of 2
#
# Source code: any of the 05-name.R script
#
# Author: Guangming Lang (gmlang@cabaceo.com)
#
# Platform: x86_64-apple-darwin13.4.0 (64-bit)
#
# Sys.info: OS X 10.10.5 (Yosemite)
#
# R version: 3.2.3 (2015-12-10)
#
################################################################################
## BEGIN User Input ##
molecule = "IL2" # "IFNg"
gate = "cd4" # "8"
sample = "504885.fcs" # "504879.fcs",
# chain gate and molecule
gate_mole_chained = paste(gate, molecule, sep = "/") # don't change
## END User Input ##
## BEGIN Main ##
# initialize vectors to hold output
sample_name = cell_prop = c()
# get the input folders
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) {
# load a gating set
gs = load_gs(file.path(auto_gs_path, dir))
# extract the gating hiearchy for the sample user specified
for (i in 1:length(gs)) {
gh = gs[[i]]
if (grepl(sample, gh@name)) {
sample_name = c(sample_name, gh@name)
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
}
}
}
# collect output in a data frame
cell_prop = data.frame(sample_name, gate=rep(gate, length(cell_prop)),
molecule=rep(molecule, length(cell_prop)), cell_prop)
print(cell_prop)
# save
save(cell_prop, file=file.path(stats_path, "cell_prop.rda"))
################################################################################
#
# Description: extracts the proportion of cells for user specified molecules,
#       gates and samples.
#
# Location: https://gitlab.com/tobiasg82/opencyto_pipeline.git
#
# Program name: 06-extract-cell-prop.R
#
# Input: autogated GatingSet objects
#
# Output: a data frame of 2
#
# Source code: any of the 05-name.R script
#
# Author: Guangming Lang (gmlang@cabaceo.com)
#
# Platform: x86_64-apple-darwin13.4.0 (64-bit)
#
# Sys.info: OS X 10.10.5 (Yosemite)
#
# R version: 3.2.3 (2015-12-10)
#
################################################################################
## BEGIN Define Function ##
extract_cell_prop = function(gs, sample_str, gate_str, molecule_str) {
# Extracts the cell proportion for a given gate, molecule, sample and
# autogated set
#
# gs: GatingSet
# sample_str: string, sample name, for example, "504879.fcs"
# gate_str: string, gate name, for example, "cd4"
# molecule_str: string, molecule name, for example, "IL2"
# chain gate and molecule
gate_mole_chained = paste(gate_str, molecule_str, sep = "/")
# initialize output vectors
sample_name = cell_prop = c()
for (i in 1:length(gs)) { # for each gating hiearchy in gs
gh = gs[[i]]
if (grepl(sample_str, gh@name)) { # if gh corresponds to sample_str
# extract cell proportion and collect for output
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
sample_name = c(sample_name, gh@name)
}
}
# collect output in a data frame and return it
data.frame(sample_name, gate=rep(gate_str, length(cell_prop)),
molecule=rep(molecule_str, length(cell_prop)), cell_prop)
}
## END Define Function ##
## BEGIN User Input ##
molecules = c("IL2", "IFNg")
gates = c("cd4", "cd8")
samples = c("504885.fcs", "504879.fcs")
## END User Input ##
## BEGIN Main ##
# initialize output holder
dat_cell_prop = data.frame()
# get the input folders that contains autogated sets
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) { # for each input folder
# load the gating set inside
gs = load_gs(file.path(auto_gs_path, dir))
for (sample in samples) {
for (gate in gates) {
for (mole in molecules) {
dat = extract_cell_prop(gs, sample, gate, mole)
}
}
}
dat_cell_prop = rbind(dat_cell_prop, dat)
}
print(dat_cell_prop)
################################################################################
#
# Description: extracts the proportion of cells for user specified molecules,
#       gates and samples.
#
# Location: https://gitlab.com/tobiasg82/opencyto_pipeline.git
#
# Program name: 06-extract-cell-prop.R
#
# Input: autogated GatingSet objects
#
# Output: a data frame of 2
#
# Source code: any of the 05-name.R script
#
# Author: Guangming Lang (gmlang@cabaceo.com)
#
# Platform: x86_64-apple-darwin13.4.0 (64-bit)
#
# Sys.info: OS X 10.10.5 (Yosemite)
#
# R version: 3.2.3 (2015-12-10)
#
################################################################################
## BEGIN Define Function ##
extract_cell_prop = function(gs, sample_str, gate_str, molecule_str) {
# Extracts the cell proportion for a given gate, molecule, sample and
# autogated set
#
# gs: GatingSet
# sample_str: string, sample name, for example, "504879.fcs"
# gate_str: string, gate name, for example, "cd4"
# molecule_str: string, molecule name, for example, "IL2"
# chain gate and molecule
gate_mole_chained = paste(gate_str, molecule_str, sep = "/")
# initialize output vectors
sample_name = cell_prop = c()
for (i in 1:length(gs)) { # for each gating hiearchy in gs
gh = gs[[i]]
if (grepl(sample_str, gh@name)) { # if gh corresponds to sample_str
# extract cell proportion and collect for output
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
sample_name = c(sample_name, gh@name)
}
}
# collect output in a data frame and return it
data.frame(sample_name, gate=rep(gate_str, length(cell_prop)),
molecule=rep(molecule_str, length(cell_prop)), cell_prop)
}
## END Define Function ##
## BEGIN User Input ##
molecules = c("IL2", "IFNg")
gates = c("cd4", "cd8")
samples = c("504885.fcs", "504879.fcs")
## END User Input ##
## BEGIN Main ##
# initialize output holder
dat_cell_prop = data.frame()
# get the input folders that contains autogated sets
gs_dirs = list.files(auto_gs_path)
for (dir in gs_dirs) { # for each input folder
# load the gating set inside
gs = load_gs(file.path(auto_gs_path, dir))
for (sample in samples) {
for (gate in gates) {
for (mole in molecules) {
dat = extract_cell_prop(gs, sample, gate, mole)
dat_cell_prop = rbind(dat_cell_prop, dat)
}
}
}
}
print(dat_cell_prop)
# save
save(dat_cell_prop, file=file.path(stats_path, "dat_cell_prop.rda"))
plot(gs[[1]])
options(scipen=999)
print(dat_cell_prop)
rm(list=ls())
source("01-set-up.R")
extract_cell_prop = function(gs, sample_str, gate_str, molecule_str) {
# Extracts the cell proportion for a given gate, molecule, sample and
# autogated set
#
# gs: GatingSet
# sample_str: string, sample name, for example, "504879.fcs"
# gate_str: string, gate name, for example, "cd4"
# molecule_str: string, molecule name, for example, "IL2"
# chain gate and molecule
gate_mole_chained = paste(gate_str, molecule_str, sep = "/")
# initialize output vectors
sample_name = cell_prop = c()
for (i in 1:length(gs)) { # for each gating hiearchy in gs
gh = gs[[i]]
if (grepl(sample_str, gh@name)) { # if gh corresponds to sample_str
# extract cell proportion and collect for output
cell_prop = c(cell_prop, getProp(gh, gate_mole_chained))
sample_name = c(sample_name, gh@name)
}
}
# collect output in a data frame and return it
data.frame(sample_name, gate=rep(gate_str, length(cell_prop)),
molecule=rep(molecule_str, length(cell_prop)), cell_prop)
}
# get the input folders
gs_dirs = list.files(auto_gs_path)
dir = gs_dirs[2]
gs = load_gs(file.path(auto_gs_path, dir))
gs[[1]]
gs[[2]]
length(gs) # number of gating hiearchies or samples
plot(gs[[1]])
plot(gs[[2]])
plot(gs[[3]])
plot(gs[[4]]) # all samples share the same gating hiearchy
# randomly select samples and plot for user specified gate and molecules
set.seed(100)
n = 4 # n must be less than length(gs)
s = sample(1:length(gs), n)
p = plotGate(gs[s], gate_mole_chained,
scales=list(cex=c(1.1,1.1)), par.strip.text=list(cex=1.1),
xlab=list(fontsize=12), ylab=list(fontsize=12),
par.settings=list(gate.text=list(cex=1)), isPath=FALSE,
default.y="<Alexa 680-A>",main=gate_mole_chained,arrange=FALSE)
p
# specify sample, gate and molecule
sample = "504879.fcs"
gate = "cd4"
molecule = "IL2"
# chain gate and molecule
gate_mole_chained = paste(gate, molecule, sep = "/")
p = plotGate(gs, gate_mole_chained,
scales=list(cex=c(1.1,1.1)), par.strip.text=list(cex=1.1),
xlab=list(fontsize=12), ylab=list(fontsize=12),
par.settings=list(gate.text=list(cex=1)), isPath=FALSE,
default.y="<Alexa 680-A>", main=gate_mole_chained,arrange=FALSE)
p
extract_cell_prop(gs, sample_str="504879.fcs", gate_str="cd4", molecule_str="IL2")
extract_cell_prop(gs, sample_str="504885.fcs", gate_str=gate, molecule_str=gate)
extract_cell_prop(gs, sample_str="504879.fcs", gate_str=gate, molecule_str=molecule)
extract_cell_prop(gs, sample_str="504885.fcs", gate_str=gate, molecule_str=molecule)
extract_cell_prop(gs, sample_str="504887.fcs", gate_str=gate, molecule_str=molecule)
extract_cell_prop(gs, sample_str="504889.fcs", gate_str=gate, molecule_str=molecule)
source("00-install-pkgs.R")
source("01-set-up.R")
source("06-extract-cell-prop.R")
rm(list=ls())
# set working directory
wkdir = "~/Projects/ds/precision-medicine/opencyto_pipeline/programs/code"
setwd(wkdir)
# install required packages
source("00-install-pkgs.R")
# setup
source("01-set-up.R")
# read gating template into R
source("04-read-gating-template.R")
source("05-auto-gating-easy.R")
str(ncfs)
ncfs[1]
length(ncfs)
ncfs[[1]]
names(ncfs[[1]])
names(ncfs)
attributes(ncfs)
fcs_files
ncfs[[1]]
ncfs[[2]]
dir = gs_dirs[1]
gs = load_gs(file.path(annotated_gs_path, dir))
gh = gs[[1]] # the gating hiearchies of all samples are the same.
comp_mat = getCompensationMatrices(gh)
ncfs_comp = compensate(ncfs, comp_mat)
chnls = parameters(comp_mat)
trans_functs = estimateLogicle(ncfs[[1]], channels = chnls)
ncfs_trans = transform(ncfs_comp, trans_functs)
gs = GatingSet(ncfs_trans)
dir = gs_dirs[15]
gs = load_gs(file.path(annotated_gs_path, dir))
gh = gs[[1]] # the gating hiearchies of all samples are the same.
comp_mat = getCompensationMatrices(gh)
ncfs_comp = compensate(ncfs, comp_mat)
# str(ncfs_comp)
# transform the data
chnls = parameters(comp_mat)
trans_functs = estimateLogicle(ncfs[[1]], channels = chnls)
ncfs_trans = transform(ncfs_comp, trans_functs)
gs = GatingSet(ncfs_trans)
gating(gt, gs, mc.cores = 4, parallel_type = "multicore")
# remove objects in working environment
rm(list=ls())
# set working directory
wkdir = "~/Projects/ds/precision-medicine/opencyto_pipeline/programs/code"
setwd(wkdir)
# install required packages
source("00-install-pkgs.R")
# setup
source("01-set-up.R")
source("02-manual-gating.R")
source("03-annotate.R")
source("04-read-gating-template.R")
# run any one of these 05 scripts depending on how to get the compensation matrix
source("05-auto-gating-easiest.R") # no compensation/transformation explicitly, gating directly using data imported from FlowJo workspaces.
warnings()
manual_gs_path
gs_manual = load_gs(file.path(manual_gs_path, "1"))
gs_annotated = load_gs(file.path(annotated_gs_path, "1"))
gs_auto = load_gs(file.path(auto_gs_path, "1"))
getNodes(gs_manual[[1]])
getNodes(gs_annotated[[1]])
getNodes(gs_auto[[1]])
i = 2
gs_manual = load_gs(file.path(manual_gs_path, i))
gs_annotated = load_gs(file.path(annotated_gs_path, i))
gs_auto = load_gs(file.path(auto_gs_path, i))
getNodes(gs_manual[[i]])
getNodes(gs_annotated[[i]])
getNodes(gs_auto[[i]])
rm(list=ls())
# set opts
library(knitr)
opts_knit$set(out.format = "markdown")
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, tidy = FALSE,
echo = TRUE, fig.path='images/', fig.width = 7, fig.height = 7,
dev = 'png') # don't use fig.align, it forces html code for img
options(width = 100, scipen = 5, digits = 5)
# set paths
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "03-06-barplot-3.Rmd")
knitr::knit(file_in)
?mk_areaplot
library(ezplot)
str(ads)
str(ads)
dat = ads %>% gather(type, rev, -year)
library(tidyr)
library(dplyr)
library(ezplot)
library(tidyr)
library(dplyr)
str(ads)
dat = ads %>% gather(type, rev, -year)
str(dat)
head(dat)
tail(dat)
plt = mk_areaplot(dat)
p = plt("year", "rev", fillby = "type", ylab = "Revenue (in Billions of USD)",
main = "Internet Advertising Revenue")
# make x-axis look nice and use brewer colors instead of default
p + ggplot2::scale_x_continuous(limit = c(2000, 2014),
breaks = seq(2000, 2014, 2)) +
ggplot2::scale_fill_brewer(palette = "Set3")
dat2 = dat %>% group_by(year) %>% mutate(total = sum(rev), pct = rev / total)
head(dat2)
plt = mk_areaplot(dat2)
p = plt("year", "pct", fillby = "type",
main = "Percent of Overall Online Ads Revenue")
# change the y-axis to display percent instead of decimals
p = scale_axis(p, "y", scale = "pct")
p + ggplot2::scale_x_continuous(limit = c(2000, 2014),
breaks = seq(2000, 2014, 2)) +
ggplot2::scale_fill_brewer(palette = "Set3")
file_in = file.path(rmd_path, "03-07-areaplot.Rmd")
knitr::knit(file_in)
rm(list=ls())
# set opts
library(knitr)
opts_knit$set(out.format = "markdown")
opts_chunk$set(comment = "", warning = FALSE, message = FALSE, tidy = FALSE,
echo = TRUE, fig.path='images/', fig.width = 7, fig.height = 7,
dev = 'png') # don't use fig.align, it forces html code for img
options(width = 100, scipen = 5, digits = 5)
# set paths
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "03-07-areaplot.Rmd")
knitr::knit(file_in)
file_in = file.path(rmd_path, "03-07-areaplot.Rmd")
knitr::knit(file_in)
