df_frgn_wife[which.min(df_frgn_wife$U.S), "year"],
"The year with the highest rate of marriage with American husbands",
icon = icon("female"),
color = "aqua"
)
})
# infoBox - The year with the highest number of American wives
output$vbox_frgn_husband = renderValueBox({
valueBox(
df_frgn_husband[which.min(df_frgn_husband$U.S), "year"],
"The year with the highest rate of marriage with American wives",
icon = icon("male"),
color = "aqua"
)
})
# infoBox - age gap
output$vbox_age_gap = renderValueBox({
valueBox(
age_diff$mean.age.difference[nrow(age_diff)],
"Average age gap between couples in 2013",
icon = icon("heart-o"),
color = "aqua"
)
})
# infoBox - mean age of men
output$vbox_age_men = renderValueBox({
valueBox(
age_diff$mean.age.of.men[nrow(age_diff)],
"Average marrying-age for male in 2013",
icon = icon("male"),
color = "aqua"
)
})
# infoBox - mean age of women
output$vbox_age_women = renderValueBox({
valueBox(
age_diff$mean.age.of.women[nrow(age_diff)],
"Average marrying-age for female in 2013",
icon = icon("female"),
color = "aqua"
)
})
}
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
# Libray -----------------------------------------------------------------
# library(googlesheets)
library(tidyr)
library(dplyr)
library(shiny)
library(DT)
library(shinydashboard)
library(ggplot2)
library(zoo)
library(dygraphs)
library(scales)
# Data --------------------------------------------------------------------
data_path = "data"
## import the annual/monthly data for dygraphs
annual_marriage = file.path(data_path, "annual_marriage.csv")
annual_marriage = read.csv(annual_marriage, stringsAsFactors=F)
annual_divorce = file.path(data_path, "annual_divorce.csv")
annual_divorce = read.csv(annual_divorce, stringsAsFactors=F)
monthly_marriage = file.path(data_path, "monthly_marriage.csv")
monthly_marriage = read.csv(monthly_marriage)
monthly_divorce = file.path(data_path, "monthly_divorce.csv")
monthly_divorce = read.csv(monthly_divorce)
## import nationality data for ggplot
long_bicultural = file.path(data_path, "long_bicultural.csv")
foreign_rate = read.csv(long_bicultural, stringsAsFactors=F)
## import marriage/divorce rate for tables
df_marriage = file.path(data_path, "df_marriage.csv")
df_marriage = read.csv(df_marriage, check.names = FALSE)
df_divorce = file.path(data_path, "df_divorce.csv")
df_divorce = read.csv(df_divorce, check.names = FALSE)
df_monthly_marriage = file.path(data_path, "df_monthly_marriage.csv")
df_mo_marriage = read.csv(df_monthly_marriage)
df_monthly_divorce = file.path(data_path, "df_monthly_divorce.csv")
df_mo_divorce = read.csv(df_monthly_divorce)
df_foreign_wife = file.path(data_path, "df_foreign_wife.csv")
df_frgn_wife = read.csv(df_foreign_wife)
df_foreign_husband = file.path(data_path, "df_foreign_husband.csv")
df_frgn_husband = read.csv(df_foreign_husband)
age_difference = file.path(data_path, "age_difference.csv")
age_diff = read.csv(age_difference)
prefecture <- unique(annual_marriage$prefecture)
year <- unique(monthly_divorce$year)
# Simple header -----------------------------------------------------------
header <- dashboardHeader(title = "Marriage & Divorce Report of Japanese Nationals (1935-2013)",
titleWidth = 675)
# Sidebar --------------------------------------------------------------
sidebar <- dashboardSidebar(
sidebarMenu(
menuItem("Charts", icon = icon("bar-chart-o"),
menuSubItem("Annual Rates", tabName = "annual_rate", icon = icon("institution")),
menuSubItem("Monthly Rates", tabName = "monthly_rate", icon = icon("line-chart")),
menuSubItem("Married to Foreigner", tabName = "foreign", icon = icon("heart"))
),
menuItem("Numbers", icon = icon("archive"),
menuSubItem("Annual Rates", tabName = "num_rate"),
menuSubItem("Monthly Rates", tabName = "num_monthly_rate"),
menuSubItem("Married to Foreigner", tabName = "num_foreign"),
menuSubItem("Average Marriyng-Age", tabName = "num_age")
)
)
)
# Compose dashboard body --------------------------------------------------
body <- dashboardBody(
# CSS
tags$head(tags$style(HTML('
.main-header .logo {
font-family: "freight-sans-pro", Helvetica Neue, "Helvetica", Arial, "sans-serif";
font-size: 24px;
}
'))),
# Items
tabItems(
tabItem("annual_rate",
fluidRow(
box(width = 12, title = "Annual Marriage & Divorce Rates",
dygraphOutput("plot_annual"))
),
# Select prefecture
fluidRow(
box(selectInput("prefecture", "Prefecture:", choices = prefecture)),
box(p(tags$b("Description")),
p("The above bar chart shows the annual marriage/divorce rate in Japan from 1935 to 2013.
Use the dropdown box on the left to select a prefecture."))
)
),
tabItem("monthly_rate",
fluidRow(
box(width = 12, title ="Monthly Marriage & Divorce Rates",
dygraphOutput("plot_monthly"))
),
# Select year
fluidRow(
box(selectInput("year", "Year:", choices = year)),
box(p(tags$b("Description")),
p("The above line chart shows the monthly marriage and divorce rates for
a given year between 1947 and 2013. Use the dropdown box on the left to
select a year."))
)
),
tabItem("foreign",
fluidRow(
box(width = 12, title ="Nationality of Foreign Wife/Husband",
plotOutput("plot_frgn"))
),
fluidRow(
column(width = 6,
# Select prefecture
box(width = NULL,
selectInput("foreign_prefecture", "Prefecture:", choices = prefecture)),
# Select type
box(width = NULL,
radioButtons("type", "Type:", choices = unique(foreign_rate$type)))
),
column(width = 6,
box(width = NULL, p(tags$b("Description")),
p("The above stacked bar chart shows the distributions of nationalities of
the foreign wives/husbands between 1995 and 2013.
Use the dropdown box to select a prefecture and the radio button to choose between
foreign wife or foreign husband."))
)
)
),
tabItem("num_rate",
fluidRow(
valueBoxOutput("vbox_marriage"),
valueBoxOutput("vbox_max_divorce"),
valueBoxOutput("vbox_min_divorce")
),
tabsetPanel(
tabPanel("Annual Marriage Rate",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("Annual Marriage Rate")),
dataTableOutput('dt_marriage'))
)
),
tabPanel("Annual Divorce Rate",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("Annual Divorce Rate")),
dataTableOutput('dt_divorce'))
)
)
)
),
tabItem("num_monthly_rate",
fluidRow(
valueBoxOutput("vbox_pop_marriage"),
valueBoxOutput("vbox_unpop_marriage"),
valueBoxOutput("vbox_pop_divorce")
),
tabsetPanel(
tabPanel("Monthly Marriage Rate",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("Monthly Marriage Rate")),
dataTableOutput('dt_mo_marriage'))
)
),
tabPanel("Monthly Divorce Rate",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("Monthly Divorce Rate")),
dataTableOutput('dt_mo_divorce'))
)
)
)
),
tabItem("num_foreign",
fluidRow(
valueBoxOutput("vbox_frgn_wife"),
valueBoxOutput("vbox_frgn_husband")
),
tabsetPanel(
tabPanel("Foreign Wives",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("The Distribution of Nationalities of the Foreign Wives")),
dataTableOutput('dt_frgn_wife'))
)
),
tabPanel("Foreign Husbands",
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("The Distribution of Nationalities of the Foreign Husbands")),
dataTableOutput('dt_frgn_husband'))
)
)
)
),
tabItem("num_age",
fluidRow(
valueBoxOutput("vbox_age_gap"),
valueBoxOutput("vbox_age_women"),
valueBoxOutput("vbox_age_men")
),
fluidRow(
box(width = 12, solidHeader = TRUE,
p(tags$b("Breakdown of Ages")),
dataTableOutput('dt_age'))
)
)
)
)
# Setup Shiny app UI components -------------------------------------------
ui <- dashboardPage(header, sidebar, body, skin = "black")
# Setup Shiny app back-end components -------------------------------------
server <- function(input, output) {
# dygraphs for annual marriage/divorce rates
an_marriage <- reactive({annual_marriage[annual_marriage$prefecture == input$prefecture, ]})
an_divorce<- reactive({annual_divorce[annual_divorce$prefecture == input$prefecture, ]})
output$plot_annual <- renderDygraph({
an_td = as.Date(an_marriage()$time, format="%m/%d/%Y")
Marriage = zoo(x = an_marriage()$rate, order.by = an_td)
an_td2 = as.Date(an_divorce()$time, format = "%m/%d/%Y")
Divorce = zoo(x = an_divorce()$rate, order.by = an_td2)
annual <- cbind(Marriage, Divorce)
dygraph(annual) %>%
dyAxis("y", label = "Marriage Rate (per 1,000 total population)",
valueRange = c(0, 15), independentTicks = TRUE) %>%
dyAxis("y2", label = "Divorce Rate (per 1,000 total population)",
valueRange = c(0, 3), independentTicks = TRUE) %>%
dySeries("Divorce", axis = 'y2')
})
# dygraphs for monthly marriage/divorce rates
mo_marriage <- reactive({monthly_marriage[monthly_marriage$year == input$year, ]})
mo_divorce<- reactive({monthly_divorce[monthly_divorce$year == input$year, ]})
output$plot_monthly <- renderDygraph({
mo_td = as.Date(mo_marriage()$time, format = "%m/%d/%Y")
Marriage = zoo(x = mo_marriage()$rate, order.by = mo_td)
mo_td2 = as.Date(mo_divorce()$time, format = "%m/%d/%Y")
Divorce = zoo(x = mo_divorce()$rate, order.by = mo_td2)
monthly <- cbind(Marriage, Divorce)
dygraph(monthly) %>%
dyAxis("y", label = "Rate (per 1,000 total population)",
valueRange = c(3, 13.2))
})
# ggplot for natinality rates
df_frgn <- reactive({foreign_rate[foreign_rate$prefecture == input$foreign_prefecture &
foreign_rate$type == input$type, ]})
output$plot_frgn <- renderPlot({
p <- ggplot(df_frgn(), aes(x = factor(year),　y = pct,　fill = country)) +
geom_bar(position = "fill",　stat = "identity")　+
scale_y_continuous(labels = percent_format()) +
theme(axis.text.x = element_text(angle = 90, hjust = 0)) +
scale_fill_hue(name = "Nationality") +
guides(fill = guide_legend(reverse=TRUE)) +
labs(x = "", y = "Percentage of Foreign Wives/Husbands")
print(p)
})
# table - marriage rate
output$dt_marriage = DT::renderDataTable({
df_marriage
}, options = list(scrollX = TRUE)
)
# table - divorce rate
output$dt_divorce = DT::renderDataTable({
df_divorce
}, options = list(scrollX = TRUE)
)
# table - monthly marriage rate
output$dt_mo_marriage = DT::renderDataTable({
df_mo_marriage
}, options = list(scrollX = TRUE)
)
# table - monthly divorce rate
output$dt_mo_divorce = DT::renderDataTable({
df_mo_divorce
}, options = list(scrollX = TRUE)
)
# table - foreign wife
output$dt_frgn_wife = DT::renderDataTable({
df_frgn_wife
}, options = list(scrollX = TRUE)
)
# table - foreign husband
output$dt_frgn_husband = DT::renderDataTable({
df_frgn_husband
}, options = list(scrollX = TRUE)
)
# table - average marriyng age
output$dt_age = DT::renderDataTable({
age_diff
}, options = list(scrollX = TRUE)
)
# infoBox - prefecture with highest marriage rate in 2013
output$vbox_marriage = renderValueBox({
valueBox(
df_marriage[which.max(df_marriage$'2013'), "prefecture"],
"The highest marriage rate in 2013",
icon = icon("heart-o"),
color = "aqua"
)
})
# infoBox - prefecture with highest divorce rate in 2013
output$vbox_max_divorce = renderValueBox({
valueBox(
df_divorce[which.max(df_divorce$'2013'), "prefecture"],
"The highest divorce rate in 2013",
icon = icon("edit"),
color = "aqua"
)
})
# infoBox - prefecture with lowest divorce rate in 2013
output$vbox_min_divorce = renderValueBox({
valueBox(
df_divorce[which.min(df_divorce$'2013'), "prefecture"],
"The lowest divorce rate in 2013",
icon = icon("edit"),
color = "aqua"
)
})
# infoBox - most popular month for marriage in 2013
output$vbox_pop_marriage = renderValueBox({
valueBox(
names(which.max(
df_mo_marriage[which(df_mo_marriage[, 'year'] == "2013"),
2:ncol(df_mo_marriage)])),
"The most popular month for marriage in 2013",
icon = icon("heart-o"),
color = "aqua"
)
})
# infoBox - most unpopular month for marriage in 2013
output$vbox_unpop_marriage = renderValueBox({
valueBox(
names(which.min(
df_mo_marriage[which(df_mo_marriage[, 'year'] == "2013"),
2:ncol(df_mo_marriage)])),
"The most unpopular month for marriage in 2013",
icon = icon("edit"),
color = "aqua"
)
})
# infoBox - most popular month for divorce in 2013
output$vbox_pop_divorce = renderValueBox({
valueBox(
names(which.max(
df_mo_divorce[which(df_mo_divorce[, 'year'] == "2013"),
2:ncol(df_mo_divorce)])),
"The most popular month for divorce in 2013",
icon = icon("edit"),
color = "aqua"
)
})
# infoBox - The year with the highest number of American husbands
output$vbox_frgn_wife = renderValueBox({
valueBox(
df_frgn_wife[which.min(df_frgn_wife$U.S), "year"],
"The year with the highest rate of marriage with American husbands",
icon = icon("female"),
color = "aqua"
)
})
# infoBox - The year with the highest number of American wives
output$vbox_frgn_husband = renderValueBox({
valueBox(
df_frgn_husband[which.min(df_frgn_husband$U.S), "year"],
"The year with the highest rate of marriage with American wives",
icon = icon("male"),
color = "aqua"
)
})
# infoBox - age gap
output$vbox_age_gap = renderValueBox({
valueBox(
age_diff$mean.age.difference[nrow(age_diff)],
"Average age gap between couples in 2013",
icon = icon("heart-o"),
color = "aqua"
)
})
# infoBox - mean age of men
output$vbox_age_men = renderValueBox({
valueBox(
age_diff$mean.age.of.men[nrow(age_diff)],
"Average marrying-age for male in 2013",
icon = icon("male"),
color = "aqua"
)
})
# infoBox - mean age of women
output$vbox_age_women = renderValueBox({
valueBox(
age_diff$mean.age.of.women[nrow(age_diff)],
"Average marrying-age for female in 2013",
icon = icon("female"),
color = "aqua"
)
})
}
# Render Shiny app --------------------------------------------------------
shinyApp(ui, server)
data_path = "data"
## import the annual/monthly data for dygraphs
annual_marriage = file.path(data_path, "annual_marriage.csv")
annual_marriage = read.csv(annual_marriage, stringsAsFactors=F)
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
sessionInfo()
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
shiny::runApp('shiny/internal/src/apps/marriage-jp')
sessionInfo()
shiny::runApp('shiny/internal/src/apps/marriage-jp')
7858.77 - 17.69
50 + 17.69
cash + 50
cash = 7858.77 - 17.69
cash + 50
cash + 67.72
?xtable
??xtable
rm(list=ls())
library(knitr)
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-plot-a-con-var-4-in-1.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
# file_in = file.path(rmd_path, "01-set-up.Rmd")
# knitr::knit(file_in)
file_in = file.path(rmd_path, "02-plot-a-con-var-4-in-1.Rmd")
knitr::knit(file_in)
rm(list=ls())
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
file_in = file.path(rmd_path, "02-plot-a-con-var-4-in-1.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
# file_in = file.path(rmd_path, "01-set-up.Rmd")
# knitr::knit(file_in)
file_in = file.path(rmd_path, "02-plot-a-con-var-4-in-1.Rmd")
knitr::knit(file_in)
rm(list=ls())
library(knitr)
opts_knit$set(out.format = "markdown")
proj_path = "~/write/ezplot-book"
manu_path = file.path(proj_path, "manuscript")
setwd(manu_path)
rmd_path = file.path(manu_path, "Rmd")
# file_in = file.path(rmd_path, "01-set-up.Rmd")
# knitr::knit(file_in)
file_in = file.path(rmd_path, "02-plot-a-con-var-4-in-1.Rmd")
knitr::knit(file_in)
